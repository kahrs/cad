 
-- j = SQRT_MINUS_ONE = (0.0,1.0)    -- complex number with only unit imaginary part

model GENERAL_BLACK_BOX

   includes Electrical_Engineering_Units;
   nports : Int;

   structure DISTRIBUTED

      -- generate for each connector the required definitions for the 
      -- incident, reflected and impedance.
      -- Intermetrics to provide the function PORT_NUM_GEN which generates
      -- the number belonging to each port number e.g. 3 for port_3.
      -- It is the inverse function of NAME_GEN (also provided by 
      -- Intermetrics).

      for each connector port_P IN NAME_GEN([1..nports]) generate
	   port_P.ctype = distributed;
         port_P.reflected :: Frequency->Wave;
         port_P.incident :: Frequency->Wave;
	   port_P.impedance :: Frequency->Impedance;
	   port_P.reflected = B(PORT_NUM_GEN(P));
	   port_P.incident = A(PORT_NUM_GEN(P));
	   default port_P.impedance = 50.0 'ohms';
      end generate;

      A : Vector(Int,Wave_type);
      A.bounds = nports;
      B : Vector(Int,Wave_type);
      B.bounds = nports;
      SPARAM : Matrix(Int,Int,complex_modtype);
      SPARAM.bounds = (nports,nports);
      MatrixEquation: B == SPARAM * A; 
          -- need to have a derived model for simulators so that 
          -- they can calculate
      default SPARAM = [(0.0,0.0),(1.0,0.0),(1.0,0.0),(0.0,0.0)]; 
		    -- This needs to modified for the n-port case.

   end DISTRIBUTED;

   structure LUMPED_ELEMENT
      for each connector port_P IN NAME_GEN([1..nports]) generate
	   port_P.ctype = electric;
         port_P.voltage :: Frequency->Voltage;
         port_P.current :: Frequency->Current;
	   port_P.voltage = V(PORT_NUM_GEN(P));
	   port_P.current = I(PORT_NUM_GEN(P));
      end generate;
	 
      V : Vector(Int,Voltage);
      V.bounds = nports;
      I : Vector(Int,Current);
      I.bounds = nports;

      for each structure LUMPED_ELEMENT generate
     
         structure Y
      
            Y : Matrix(Int,Int,Admittance);
            Y.bounds = (nports,nports);
            Matrixequation: I == Y * V; 
            -- need to have a derived model for simulators so that they can 
            -- calculate
            default Y = [(0.0,0.0),(0.02,0.0),(0.02,0.0),(0.0,0.0)];
   
         end Y;

         structure Z
      
            Z : Matrix(Int,Int,Admittance);
            Z.bounds = (nports,nports);
            Matrixequation: V == Z * I; 
            -- need to have a derived model for simulators so that they can 
            -- calculate
            default Z = [(0.0,0.0),(50.0,0.0),(50.0,0.0),(0.0,0.0)];
   
         end Z;

         IF nports == 2 generate
            structure ABCD
               ABCD : Matrix(Int,Int,mixed);
               -- RECTANG(PHYSICAL(Float))) for MAT WHERE
	         -- UNITLESS(MAT(1,1)), UNITLESS(MAT(2,2)),
	         -- UNITLESS(MAT(1,2)/1.0 'OHM'), UNITLESS(MAT(2,1)*1.0 'OHM');
               -- UNITLESS IS A BOOLEAN FUNCTION
               -- NEED TO CONSTRUCT V AND I MIXED VECTORS TO GO WITH ABCD MATRIX
               ABCD.bounds = (2,2);
               
            end ABCD;
         end generate;
      end generate;
   end LUMPED_ELEMENT;

   structure SIGNAL_FLOW
      for each connector port_P IN NAME_GEN([1..nports]) generate
	 port_P.ctype = sigflow;
	 port_P.dir = Direction;
	 port_P.amplitude = A(PORT_NUM_GEN(P));
	 -- direction of each connector not specified here
      end generate;
   end SIGNAL_FLOW;

end GENERAL_BLACK_BOX;

model resistor          -- simple resistor   
   includes GENERAL_BLACK_BOX.LUMPED_ELEMENT;
   nports = 2;
   attribute r: Resistance;
   structure electrical 
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;
      
      R1 : port_1.current == (port_1.voltage - port_2.voltage)/r;
      R2 : port_2.current == -port_1.current;
   end electrical;
end  resistor;

model capacitor         -- simple capacitor   
   includes GENERAL_BLACK_BOX.LUMPED_ELEMENT;
   nports = 2;
   attribute c : Capacitance;
   structure electrical
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;
      C1 : port_1.current == SQRT_MINUS_ONE*2*pi*f*c*
                     (port_1.voltage(f) - port_2.voltage(f));
      C2 : port_2.current == -port_1.current;
   end electrical;
end capacitor;

model inductor          -- simple inductor   
   includes GENERAL_BLACK_BOX.LUMPED_ELEMENT;
   nports = 2;
   attribute l : Inductance;
   structure electrical
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;
      L1 : port_1.current == (port_1.voltage(f) - port_2.voltage(f))
                     /(SQRT_MINUS_ONE*2*pi*f*l);
      L2 : port_2.current == -port_1.current;
   end electrical;
end inductor;

model VOLTAGE_SOURCE_SINE_WAVE     -- sinusoidal signal source
   includes GENERAL_BLACK_BOX.LUMPED_ELEMENT;
   nports = 2;
   attribute amplitude:  Voltage;
   attribute f0:  Frequency;
   structure electrical
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;
      A :: Frequency -> potential;
      A(f) | f == f0     = amplitude
           | otherwise   = 0.0;
      V1 : port_1.voltage(f) - port_2.voltage(f) == A(f); 
      V2 : port_2.amperage == -port_1.amperage;
   end electrical;
end VOLTAGE_SOURCE_SINE_WAVE;

model VOLTAGE_SOURCE_TRIANGLE_WAVE
   includes GENERAL_BLACK_BOX.LUMPED_ELEMENT;
   nports = 2;
   precision = 1.0e-7;                -- machine dependent
   attribute peak : Voltage;
   attribute period : Time;
	
   structure electrical
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;

      A :: Frequency -> Voltage;
      f0 :: Frequency;
      f0 = 1.0/period;
      p0 :: Voltage;
      p0 = 8.0*peak/(pi*pi);
      count :: Int;
      r,diff :: Float;
      r = (f/f0 + 1)/2;
      count = FloattoInt(r);
      diff = abs(r - count);
      A(f)  | diff <= precision    = (-1.0)^(count-1)*p0/((2*count-1)^2)
            | otherwise            = 0.0;
	V1 : port_1.voltage - port_2.voltage == A(f);
	V2 : port_2.current == -port_1.current;
	
   end electrical;
end VOLTAGE_SOURCE_TRIANGLE_WAVE;

model VOLTAGE_SOURCE_SQUARE_WAVE
   includes GENERAL_BLACK_BOX.LUMPED_ELEMENT;
   nports = 2;
   precision = 1.0e-7;                -- machine dependent
   attribute peak : Voltage;
   attribute period : Time;

   structure electrical
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;
	
      A :: Frequency -> Voltage;
      f0 :: Frequency;
      f0 = 1.0/period;
      p0 :: Voltage;
      p0 = 4.0*peak/pi;
      count :: Int;
      r,diff :: Float;
      r = (f/f0 + 1)/2;
      count = FloattoInt(r);
      diff = abs(r - count);
      A(f)  | diff <= precision       = p0/(2*count-1)
            | otherwise               = 0.0;
	
	V1 : port_1.voltage - port_2.voltage == A(f);
	V2 : port_2.current == -port_1.current;

   end electrical;
end VOLTAGE_SOURCE_SQUARE_WAVE;

model IDEAL_TRL
   includes GENERAL_BLACK_BOX.DISTRIBUTED;
   nports = 2;
   attribute L : Length;
   attribute Z0 : Impedance;
   structure electrical
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;
	A :: Frequency -> Complex;
	B :: Frequency -> Impedance;
	C :: Frequency -> Admittance;
	D :: Frequency -> Complex;
      -- ABCD matrix of ideal transmmision line
      A(f) = cos ( 2*Pi*f*L ) ;                          -- expression of A
      B(f) = sin ( 2*Pi*f*L ) * SQRT_MINUS_ONE * Z0 ;    -- expression of B
      C(f) = sin ( 2*Pi*f*L ) * SQRT_MINUS_ONE / Z0 ;    -- expression of C
      D(f) = cos ( 2*Pi*f*L ) ;                          -- expression of D
	T1 : port_1.voltage == A(f) * port_2.voltage - B(f) * port_2.current;
	T2 : port_1.current == C(f) * port_2.voltage - D(f) * port_2.current;
	
   end electrical;
end IDEAL_TRL;

model BLACK_BOX_READ_FROM_COMPACT_SOFTWARE
      
   includes GENERAL_BLACK_BOX.DISTRIBUTED;
   nports = GET_NUM_portS(ckt_name);
   SPARAM = GET_VALUES(F,COMPACT);
   -- Read s-parameters from exterenal CSI formatted file

end BLACK_BOX_READ_FROM_COMPACT_SOFTWARE;

model DELAY_IDEAL
   includes GENERAL_BLACK_BOX.DISTRIBUTED;
   nports = 2;
   attribute TAU : Time;
   structure electrical
      connectors port_1, port_2;
      VAL :: Frequency -> Complex;
	VAL(f) = EXP(-2.0 * SQRT_MINUS_ONE * PI * f * TAU);  -- PI predefined 
	SPARAM = [(0.0,0.0),VAL,VAL,(0.0,0.0)];
	D1 : port_1.incident == VAL*port_2.reflected;
	D2 : port_2.incident == VAL*port_1.reflected; 
   end electrical;
end DELAY_IDEAL;

model FILTERS
   includes MATH_MODELS_1;  -- Math library
   includes GENERAL_BLACK_BOX.LUMPED_ELEMENT;
   nports = 2;
   attribute A_PASS : Float;    -- pass attenuation threshold
   attribute A_STOP : Float;    -- stop attenuation threshold
   constraint CONSTR1 : A_STOP > A_PASS
     report "Error: Stop threshold must be larger than pass threshold for filters.";

   structure electrical
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;
      ATTENUATION :: Frequency -> Float;
      RETURN_LOSS :: Frequency -> Float;
      port_2.incident == 0.0; -- Needed for normal ATTENUATION & RETURN_LOSS
                              -- formulae 
      F1 : port_1.incident == ATTENUATION*port_2.reflected;
      F2 : port_1.incident == RETURN_LOSS*port_1.reflected; 
   end electrical;

   structure LOW_PASS_FILTER
      attribute F_PASS : Frequency;    -- maximum passing frequency
      attribute F_STOP : Frequency;    -- minimum stoping frequency
      constraint CONSTR1 : F_PASS < F_STOP
        report "Error: Stoping frequency must be larger than passing frequency for low pass filters.";
      A_PASS == ATTENUATION (F_PASS);
      A_STOP == ATTENUATION (F_STOP);
   end LOW_PASS_FILTER;

   structure HIGH_PASS_FILTER
      attribute F_STOP : Frequency;    -- maximum stoping frequency
      attribute F_PASS : Frequency;    -- minimum passing frequency
      constraint CONSTR1 : F_STOP < F_PASS
        report "Error: Stoping frequency must be smaller than passing frequency for high pass filters.";
      A_PASS == ATTENUATION (F_PASS);
      A_STOP == ATTENUATION (F_STOP);
   end HIGH_PASS_FILTER;

   structure BAND_PASS_FILTER
      attribute F_STOP_1 : Frequency;  -- end stoping frequency (lower side)
      attribute F_PASS_1 : Frequency;  -- start passing frequency
      constraint CONSTR1 : F_STOP_1 < F_PASS_1
        report "Error: Lower side stoping frequency must be smaller than passing frequency for band pass filters.";
      attribute F_PASS_2 : Frequency;  -- end passing frequency 
      attribute F_STOP_2 : Frequency;  -- start stoping frequency (higher side)
      constraint CONSTR1 : F_PASS_2 < F_STOP_2
        report "Error: Higher side stoping frequency must be larger than passing frequency for band pass filters.";
      A_PASS_1 == ATTENUATION (F_PASS_1);
      A_PASS_2 == ATTENUATION (F_PASS_2);
      A_STOP_1 == ATTENUATION (F_STOP_1);
      A_STOP_2 == ATTENUATION (F_STOP_2);
   end BAND_PASS_FILTER;

   structure BAND_STOP_FILTER
      attribute F_PASS_1 : Frequency;  -- end passing frequency (lower side)
      attribute F_STOP_1 : Frequency;  -- start stoping frequency 
      constraint CONSTR1 : F_PASS_1 < F_STOP_1
        report "Error: Lower side stoping frequency must be larger than passing frequency for band stop filters.";
      attribute F_STOP_2 : Frequency;  -- end stoping frequency 
      attribute F_PASS_2 : Frequency;  -- start passing frequency (higher side) 
      constraint CONSTR1 : F_STOP_2 < F_PASS_2
        report "Error: Higher side stoping frequency must be smaller than passing frequency for band stop filters.";
      A_PASS_1 == ATTENUATION (F_PASS_1);
      A_PASS_2 == ATTENUATION (F_PASS_2);
      A_STOP_1 == ATTENUATION (F_STOP_1);
      A_STOP_2 == ATTENUATION (F_STOP_2);
   end BAND_STOP_FILTER;

end FILTERS;

-- All functions used in the following context such as IDEAL_0, IDEAL, 
-- BUTTERWORTH, .... , have been defined in math library (MATH.MDL)

model IDEAL_LOW_PASS
   includes FILTERS.LOW_PASS_FILTER;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = Ideal_0(f,fcutoff);
end IDEAL_LOW_PASS;

model IDEAL_HIGH_PASS
   includes FILTERS.HIGH_PASS_FILTER;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_HighPass ( Ideal(f) );
end IDEAL_HIGH_PASS;

model IDEAL_BAND_PASS
   includes FILTERS.BAND_PASS_FILTER;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_BandPass ( Ideal(f) );
end IDEAL_BAND_PASS;

model IDEAL_BAND_STOP
   includes FILTERS.BAND_STOP_FILTER;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_BandStop ( Ideal(f) );
end IDEAL_BAND_STOP;

model Butterworth_LOW_PASS
   includes FILTERS.LOW_PASS_FILTER;
   attribute order : Int;
   attribute tolerance : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = Butterworth_O(tolerance,f,fcutoff,order);
end Butterworth_LOW_PASS;

model Butterworth_HIGH_PASS
   includes FILTERS.HIGH_PASS_FILTER;
   attribute order : Int;
   attribute tolerance : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_HighPass ( Butterworth(f) );
end Butterworth_HIGH_PASS;

model Butterworth_BAND_PASS
   includes FILTERS.BAND_PASS_FILTER;
   attribute order : Int;
   attribute tolerance : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_BandPass ( Butterworth(f) );
end Butterworth_BAND_PASS;

model Butterworth_BAND_STOP
   includes FILTERS.BAND_STOP_FILTER;
   attribute order : Int;
   attribute tolerance : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_BandStop ( Butterworth(f) );
end Butterworth_BAND_STOP;

model Chebyshev_LOW_PASS
   includes FILTERS.LOW_PASS_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = ChebyFilter_O(epsilon,f,fcutoff,order);
end Chebyshev_LOW_PASS;

model Chebyshev_HIGH_PASS
   includes FILTERS.HIGH_PASS_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_HighPass ( ChebyFilter(f) );
end Chebyshev_HIGH_PASS;

model Chebyshev_BAND_PASS
   includes FILTERS.BAND_PASS_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_BandPass ( ChebyFilter(f) );
end Chebyshev_BAND_PASS;

model Chebyshev_BAND_STOP
   includes FILTERS.BAND_STOP_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_BandStop ( ChebyFilter(f) );
end Chebyshev_BAND_STOP;

model Bessel_LOW_PASS
   includes FILTERS.LOW_PASS_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = BesselFilter_O(epsilon,f,fcutoff,order);
end Bessel_LOW_PASS;

model Bessel_HIGH_PASS
   includes FILTERS.HIGH_PASS_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_HighPass ( BesselFilter(f) );
end Bessel_HIGH_PASS;

model Bessel_BAND_PASS
   includes FILTERS.BAND_PASS_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_BandPass ( BesselFilter(f) );
end Bessel_BAND_PASS;

model Bessel_BAND_STOP
   includes FILTERS.BAND_STOP_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_BandStop ( BesselFilter(f) );
end Bessel_BAND_STOP;

model Elliptic_LOW_PASS
   includes FILTERS.LOW_PASS_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = EllipticFilter_O(epsilon,f,fcutoff,order);
end Elliptic_LOW_PASS;

model Elliptic_HIGH_PASS
   includes FILTERS.HIGH_PASS_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_HighPass ( EllipticFilter(f) );
end Elliptic_HIGH_PASS;

model Elliptic_BAND_PASS
   includes FILTERS.BAND_PASS_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_BandPass ( EllipticFilter(f) );
end Elliptic_BAND_PASS;

model Elliptic_BAND_STOP
   includes FILTERS.BAND_STOP_FILTER;
   attribute order : Int;
   attribute epsilon : Float;
   attribute fcutoff : Frequency;
   ATTENUATION(f) = LowPass_to_BandStop ( EllipticFilter(f) );
end Elliptic_BAND_STOP;

-- From Microwave SUCCESS
model operational_amplifier
   includes GENERAL_BLACK_BOX.LUMPED_ELEMENT;
   nports = 3;
   attribute DC_gain : Float;
   attribute In_res : Resistance;
   attribute Out_res : Resistance;
   attribute Roll_off_Frq_3db : Frequency;
   attribute delay : Time;

   structure electrical
      connectors port_1, port_2, port_3;
      port_1.ctype = electric;
      port_2.ctype = electric;
      port_3.ctype = electric;
      AC_gain :: Frequency -> Complex;
      AC_gain (f) = DC_gain * exp ( -SQRT_MINUS_ONE*2*pi*f*delay ) /
                    ( 1 + SQRT_MINUS_ONE*f/Roll_off_Frq_3db ) ;
      T1 : port_1.current * In_res == port_1.voltage;
      T2 : port_2.current * Out_res - port_2.voltage == 
                             AC_gain * ( port_1.voltage - port_3.voltage );
      T3 : port_3.current * Out_res == port_3.voltage;
   end electrical;
end operational_amplifier;

model attenuator
   includes GENERAL_BLACK_BOX.DISTRIBUTED;
   nports = 2;
   attribute attenuation : Float;

   structure electrical
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;
      S21 : Complex;
      S21 = (attenuation,0.0);
      SPARAM = [(0.0,0.0),(0.0,0.0),S21,(0.0,0.0)]; 
   end electrical;
end attenuator;

model mixer
   includes GENERIC_BLACK_BOX.SIGNAL_FLOW;
   attribute N_rf : Float;
   attribute N_lo : Float;
   default N_rf = 1.0 ;
   default N_lo = -1.0 ;
   -- attribute conversion_gain:  Phys (Float);
   -- attribute isolation:  Phys (Float);
   -- attribute nf:  Phys (Float);
   -- attribute return_loss:  Phys (Float);
   structure signal_flow
      connectors port_1,port_2,port_3;
      port_1.amplitude :: Frequency;
      port_2.amplitude :: Frequency;
      port_3.amplitude :: Frequency;
        
      port_1.dir = "in";
      port_2.dir = "in";
      port_3.dir = "out";
      -- if_frq.power = rf.power + conversion_gain;
      M1 : port_3.amplitude ==
                N_rf * port_1.amplitude + N_lo * port_2.amplitude;
   end signal_flow;
end mixer;

model vco   
   includes GENERIC_BLACK_BOX.SIGNAL_FLOW;
   nports = 2;
   attribute vco_gain : Float;
   structure signal_flow             -- linear vco
      connectors port_1,port_2;
	port_1.ctype = sigflow;
	port_2.ctype = sigflow;
      port_1.amplitude :: Voltage;
      port_2.amplitude :: Frequency;
   
      V1: port_2.amplitude == port_1.amplitude * vco_gain;
   end signal_flow;
end vco;

model switch
   includes GENERIC_BLACK_BOX.SIGNAL_FLOW;
   attribute switch_threshold: Power;
   structure signal_flow
      connectors port_1,port_2,port_3;
	port_1.amplitude :: Power;
	port_2.amplitude :: Power;
	port_3.amplitude :: Power;
        
      port_1.dir = "in";   -- input power
      port_2.dir = "in";   -- switch signal
      port_3.dir = "out";  -- output power
      switch_signal :: Power -> Int;
      switch_signal (p) 
                | p >= switch_threshold = 1
                | otherwise = 0 ;
      S1 : port_3.amplitude == 
                port_1.amplitude * switch_signal ( port_2.amplitude ) ;
   end signal_flow;
end switch;

-- From Microwave SUCCESS
model antenna_parabolic
   includes GENERAL_BLACK_BOX.DISTRIBUTED;
   nports = 2;
   attribute Diameter : Float;

   structure electrical
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;
      S12 :: Frequency -> Complex;
      S21 :: Frequency -> Complex;
      S12 (f) = Diameter * f * Pi / Speed_of_Light;
      S21 (f) = S12 (f) ;
      SPARAM (f) = [(0.0,0.0),S12(f),S21(f),(0.0,0.0)]; 
   end electrical;
end antenna_parabolic;

model multiplier_freq              -- signal flow multiplier   
   includes GENERIC_BLACK_BOX.SIGNAL_FLOW;
   nports = 2;
   attribute N : Float;
   structure signal_flow
      connectors port_1,port_2;
	port_1.amplitude :: Frequency;
	port_2.amplitude :: Frequency;
        
      port_1.dir = "in";
      port_2.dir = "out";
      
      M1: port_2.amplitude == N * port_1.amplitude;
   end signal_flow;
end  multiplier_freq;

model divider_freq
   includes GENERIC_BLACK_BOX.SIGNAL_FLOW;
   nports = 2;
   attribute Ratio : Float;
   default Ratio = 1.0;
   structure signal_flow
      connectors port_1,port_2;
	port_1.amplitude :: Frequency;
	port_2.amplitude :: Frequency;
        
      port_1.dir = "in";
      port_2.dir = "out";
      
      D1: port_2.amplitude == port_1.amplitude / Ratio;
   end signal_flow;
end divider_freq;

model phase_detector
   includes GENERIC_BLACK_BOX.SIGNAL_FLOW;
   nports = 3;
   attribute pd_gain : pd_gain_dimension;
   structure signal_flow             -- linear detector
      connectors port_1,port_2,port_3;
	port_1.ctype = sigflow;
	port_2.ctype = sigflow;
	port_3.ctype = sigflow;
      port_1.amplitude :: Plane_angle;
      port_2.amplitude :: Plane_angle;
      port_3.amplitude :: Voltage;
   
      port_3.amplitude = pd_gain * (port_2.amplitude - port_1.amplitude);
   end signal_flow;
end phase_detector;

-- From Microwave SUCCESS
model phase_shifter
   includes GENERAL_BLACK_BOX.DISTRIBUTED;
   nports = 2;
   attribute phase_shift : Plane_angle;

   structure electrical
      connectors port_1, port_2;
      port_1.ctype = electric;
      port_2.ctype = electric;
      S12 : Complex;
      S21 : Complex;
      S12 = (cos(phase_shift),sin(phase_shift));
      S21 = S12 ;
      SPARAM = [(0.0,0.0),S12,S21,(0.0,0.0)]; 
   end electrical;
end phase_shifter;



