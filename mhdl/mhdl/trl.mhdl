------------------------------------------------------------------------
package freq_domain_support

   -- define admittance/conductance ... these definitions are generally only
   -- defined in the frequency domain (including DC). Admittance could be
   -- "instantaneous" in that it is the I/V ratio at any point it time, but
   -- this is not very useful and not used. Generally the definition is the
   -- ratio of rms (or equivalently peak) signals at a particular
   -- frequency and their angular relationship. Simply picture I and V
   -- sine waves with different magnitudes and phases.

   dimension admittance = current / potential;
   unit siemen of admittance variations mho;  -- variation for old-timers

   -- by definition, the identity values of "current" and "potential" are
   -- used, therefore the "base" value of siemen is amp/volt (er, amp|volt).

   dimension conductance = potential / current;
   unit ohm of conductance variations ohms;

   -- ITEM 1:
   -- in accordance with the MHDL_Standard (as it is now), frequency domain
   -- elements must be defined in terms of incident/reflected waves (i.e.,
   -- S-parameters) in the package "distributed". Of course we can use any of
   -- the "network" parameters, that is Y- and Z-parameters, and in the case
   -- of two-ports, abcd- and h-parameters, etc. rather than S-parameters.
   -- Therefore the purpose of the following MHDL statements is to define
   -- some supporting functions needed in translating among these.
   --
   -- One of the first things to note is that users (you know those annoying
   -- people who aggravate the important programmers) generally deal with
   -- "normalized" values. These are really just scaling of the "base" forms.
   -- I'll use the notation (ie Z) for the normalized value, and (ie Zu) for
   -- the un-normalized forms.
   -- So without further ado, here are the normalization functions:
   --
   --   Z = Zu / Zsys   -- Zu and Z are matrices, Zsys is a constant
   --                      microwave types like 50 ohms, rf types like 75 ohms
   --   Y = Yu / Ysys   -- again, Ysys: microwave=1/50 and rf=1/75 ohms usually
   --
   -- A note on units: Zu (that is each element of Zu) has the
   -- unit of ohms (Yu has mhos); Z and Y have no units.
   --
   -- Of importance to note, is that if someone gives you normalized network
   -- parameters, they must also give you the `system impedance/admittance'.
   -- Also note that S-parameters are always normalized, since no one talks
   -- about an unnormalized version and its not useful anyway.
   --
   -- Some of the basic transformation functions are (NOTE: inv = matrix inverse)
   --
   --    Zu = inv Yu    and     Yu = inv Zu   -- std matrix inversion works for
   --                                            un-normalized forms
   --         (I - Y)
   --    S =  -------     -- note that Y already has "Ysys" built-in
   --         (I + Y)     -- therefore, S is normalized to this.
   --
   -- Although we could also write S as a function of Z, and the inverses, for
   -- what I want to show here I don't need them, therefore I'm going to stop
   -- here (plus this is Ross's job).
   --
   -- Try to define some of the functions above.
                         -- Q1:  since the various functions apply to only
                         --      specific arguments, I didn't try to create
                         --      a `class' for them, is this the right approach?
                         -- Q1a: I must admit that I had some difficulty figuring
                         --      out the array things on LRM pages 135-9. I still
                         --      don't know if I am using these things right.
                         --      It appears to me that you must use the functions
                         --      on page 138-9 for matrix ops, but
                         --      Is there any reason we couldn't, for example,
                         --      extend the definition of "+" to include matrix
                         --      arguments (rather than "|+|")? This would be
                         --      more natural.
   -- BTW: the word "matrix" isn't in the indices, I know that we have multiple
   -- index arrays for this, but the phrase "traditional matrix" occurs anyway
   -- on page 138. It wouldn't hurt to add it to the indices.

   -- Declare the function:
   normalize :: (matrix m, Complex f) => m -> f -> m;
                         -- Q2:  Is this right? Why is there `special' syntax
                         --      for matrix types on page 139 (ie for "trans")?
                         -- Q2a: will real arguments (the usual case) for "f"
                         --      get coerced into a Complex?
                         -- Q2b: I know in Haskell, there was some hooey about
                         --      lower case versions of the first part of the
                         --      alphabet (a,b,c...) being used for type
                         --      signatures. Is this the case? I wanted to use
                         --      "m".
                         -- Q2c: I had trouble trying to figure out if
                         --      "scaled_value" will take a complex, I assumed
                         --      it did and simply wrote:
   -- Define the function:
   type modmat = matrix (Int, Int, modtype);
   normalize:: (Complex f) => modmat -> f -> modmat;

   -- AN INVERSE FUNCTION (and others) NEEDS TO BE ADDED TO THE MATRIX THINGS.
   -- (Aside: I remember Dave showing or giving me this in Haskell, but I can't
   -- find it, its good exercise anyway):
   invert :: (matrix m) => m -> m;

   -- OK, with these things in hand lets define what we really want.
   yn_to_s :: (matrix m) => m -> m;  -- again "m" must be square.
   yn_to_s(yn) = (I - yn) |*| invert (I + yn);

   y_to_s :: (matrix m, real f) => m -> f -> m;
   y_to_s(y,f) = yn_to_s(normalize(y,f));

   -- ITEM 2:
   -- since the speed of light is not predefined ...

   dimension velocity = length / time;
                         -- Q5:  OK to not have a unit for this? And use a
                         --      unit expression in the assignment?
   attribute Speed_of_Light : velocity;
   Speed_of_Light = 2.99793e8  m / s;

end;

-- *****************************************************************************
-- ** OK  define frequency-domain model ****************************************
-- *****************************************************************************

model trl  -- Transmission Line Model

inherits freq_domain_support;

structure freq_domain
  -- IDEA: structures should have attributes to be able to tell what kind
  -- of information is in here. The name means nothing.

  connectors P1, P2;  -- ignore GND for now
                         -- Q6:  Is this the right way to to "type" the connects?
                         --      or is it something like: P1.type := distrib; --?

  -- THESE ARE THE "PASSED-IN" PARAMETERS:
  definitions
	attribute   Y0 : admittance;  -- type from "freq_domain_support"
  	attribute  Len : length;      -- any length, model uses meters
  	attribute Eeff : real;

  	attribute Omega : frequency;

  -- alpha and beta are real/imag parts of complex number
  	attribute alpha, beta : real;
  	attribute nLen : real;     -- normalized to meters

  omega := 2 * pi * f;       -- "f" is the reserved name for frequency.
                             -- from examination of this the attributes of omega
                             -- and its use to define behavior, a CAD tool
                             -- surmises that this is a frequency domain model.

  alpha := 0.0;              -- no loss

  -- THIS APPEARED IN THE ORIGINAL  >> nLen := to_MKS( Len );   -- SEE BELOW
  --    Inherited (dim: length / time )  -----
  --                                         |
  --    Frequency (dim: 1/time) --           |
  --                             |           |
  --    Passed in (dim: length)  |           |
  --                     |       |           |
  --    UNITLESS         |       |           |
  --           |         |       |           |
  --           v         v       v           v
  beta := (sqrt(Eeff) * nLen * Omega) / Speed_of_Light;
                         -- Q7:  This relatively simple expression, brings up
                         --      some good questions. Via unit analysis, MHDL
                         --      will indeed conclude that beta is unitless;
                         --      but let's say that the units are:
                         --         nLen           is in feet
                         --         Omega          is in 1/sec
                         --         Speed_of_Light is in meters/sec
                         --      will the final unit&value of beta be:
                         --         (feet/sec) / (meter/sec)                 OR
                         --         (feet) / (meter)    <<scaled>>           OR
                         --         <<unitless, scale feet&meter applied>>   ???
                         --      the last is needed in order for the expressions
                         --      to work.  Does this happen, do I need to do
                         --      anything to ensure this?

  -- OK, next declare a 2x2 admittance matrix [complex values]

  attribute I : complex_2x2;
  attribute S : complex_2x2;
  attribute Y : complex_2x2;

  Y(2,1) := Y(1,2);
  Y(2,2) := Y(1,1);
  Y(1,1) :=  Y0 * coth ( alpha :+ beta );
  Y(1,2) := -Y0 * csch ( alpha :+ beta );
  -- I put them in this order to emphasis that order doesn't matter (ie,
  -- we have right-hand sides used before defined)

  -- define the identity matrix
  I(2,1) := I(1,2);
  I(2,2) := I(1,1);
  I(1,1) := 1 :+ 0;
  I(1,2) := 0 :+ 0;


  -- NOW use the matrix routines to convert this to S:
  S := (I - Y) |*| invert(I + Y);   -- simple, |*| defined already,
                                    -- * would be nicer

  -- I now have the two-port S-parameters, now to get them "attached"
  -- to the connections!
  P1.incident  := S(1,1);  -- WRONG, SEE BELOW
  P1.reflected := S(2,1);  -- WRONG, SEE BELOW
  P2.incident  := S(1,2);  -- WRONG, SEE BELOW
  P2.reflected := S(2,2);  -- WRONG, SEE BELOW

  -- ITEM 3:
  -- We now have some problems (as far as I see). First, we aren't really
  -- specifying "incident and reflected" waves, these are the solutions.
  -- As far as terminology is concerned, the S-parameters (which are behaviors)
  -- would be called more like: reflection_function and transmission_function.
  -- (someone help me with *these* terms [they aren't too good either!]). Now
  -- granted this is only a terminology problem, but beyond this ...
  --
  -- The second thing wrong with the current definition that this terminology
  -- wouldn't be used for a connection of more than two elements (even though
  -- multiple S-parameter interconnects are fine). 
  --
  -- Recommendation: broaden the "distributed" package to include behaviors
  -- for all network parameters (S, Y, Z) and perhaps the two port types (H,
  -- abcd). While at it, add noise correlation matrix support, and two-port
  -- noise specifications. Change the name from "distributed" to "freq_domain". 
  -- SEE: connection semantics below.

end freq_domain;
end trl;

-- *****************************************************************************
-- ** NEXT MODEL ... a time-domain model  **************************************
-- *****************************************************************************

module capacitor  

  structure time_domain

  connections p1, p2 : electrical;

  -- capacitor function is:   
  --
  --                dq                              d(c*v)
  --            i = --          [eq 1]    ALSO:   = ------
  --                dt                                dt
  --
  -- if the capacitor is linear (ie, the capacitance is a fixed value), then
  --
  --                dv
  --          i = C --          [eq 2] the familiar capacitance equation
  --                dt

  attribute C : capacitance;
  attribute Q : charge;
                         -- Q9:  How to initialize?  How about ...
                         --      Q(t=0) = 0 coulombs;   -- assumes time-varying
                         -- Q9a: I need to specify that this is a time-varying
                         --      quantity, how [ Q :: (time -> charge) ] ?

  P1 : p1.current == d (C * (p1.voltage - p2.voltage)) | d(t);
  P2 : p2.current == - p1.current;
  -- this allows C to be anything (i.e., time-varying, nonlinear) ...

                         -- Q10: What if I wanted to restrict C to a simple #
                         --      or expression value resulting in a number?
                         --      So I could use:
                    -- X1 : p1.current == C * d (p1.voltage - p2.voltage) | d(t);
                    -- X2 : p2.current == - p1.current;
                         --      How would I use a constraint to limit the
                         --      "properties of C"?

end time_domain;
end capacitor;

-- *****************************************************************************
-- ** FINALLY ... INTERCONNECTION OF THESE  ************************************
-- *****************************************************************************

model connect1

structure any

  COMP1 :: trl.freq_domain
    definitions
       Y0 := 1/50 mhos;
       Eeff := 1;
       Len  := 1 cm;

  COMP2 :: capacitor.time_domain
     definitions
       C := 1 pF;

  connection map
  connect COMP1.P2, COMP2.P1;

  -- ITEM 4:
  -- The main point, have we defined (semantically) what this last connect
  -- line means?

end any;
end connect1;

