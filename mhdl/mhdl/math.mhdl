
package recips

class Reciprocal (a) {
   recipl :: a -> a ;
   recipl (a) | a /= zero = 1 / a
              | otherwise = max ;
} where Num (a) ;

instance Reciprocal (Real) {
   recipl (a) | a /= 0.0 = 1 / a
              | otherwise = maxreal ;
} where Real (a) ;
   
instance Reciprocal (Complex) {
   recipl (a) | a /= 0.0 = 1 / a
              | otherwise = maxComplex ;
} where Complex (a) ;
   
end recips ;

-- I. Signal processing functions:

model MATH_MODELS_1

  includes recips ;
  Natural :: Int -> List (Int) ;
  Natural (0) = [] ;
  Natural (n+1) = Natural (n) :- (n+1) ;
  type n_bit ( Int ) = List (Int) ;
  n_bit (n) = Natural (n) ;
  type Equation = func([b]) -> Bool ;
  type DiffEquation = Equation(func(func));

  class RealFunc(func) {
    func :: [b] -> a;
    solution :: [b] -> Int -> List ( [ equation ] ) -> [b] 
                where Equation (equation);
    -- 'solution' need to be defined later: solve n-unknowns ([b]) from
    -- n-equations.
  } where { Real(a), Function (func) };

  class Cont (func) {

    -- Domain Transformations for continuous signal:
    Laplace         :: func(Time,a) -> func(b,a) where {Real(a),Complex(b)} ;
    InvLaplace      :: func(b,a) -> func(Time,a) where {Real(a),Complex(b)} ;
    FourierCont     :: func(Time,a) -> func(Frequency,a) where Real(a); 
    InvFourierCont  :: func(Frequency,a) -> func(Time,a) where Real(a);
    HilbertTrans    :: func(Time,a) -> func(Time,a) where Real(a); 
               
    --  see Ref. 1, page 46-34
    ( Laplace ( func ) ) (b,a) =
        defint ( ( ZERO, PLUS_INFINITY ), 
                 ( \(t) -> ( func (t,a) * EXP( - b * t ) ) ) );

    ( InvLaplace ( func ) ) (t,a) =
        defint ( ( c + SQRT_MINUS_1*MINUS_INFINITY , 
                   c + SQRT_MINUS_1*PLUS_INFINITY ) , 
                 ( \(b) -> ( func (b,a) * EXP( b * t ) ) ) );

    -- see Ref. 1, page 7-2
    ( FourierCont ( func ) ) (f,a) =
        defint ( ( MINUS_INFINITY, PLUS_INFINITY ), 
                 ( \(t) -> ( func(t,a) * EXP(-SQRT_MINUS_1*2.0*PI*f*t) ) ) );

    ( InvFourierCont ( func ) ) (t,a) =
        defint ( ( MINUS_INFINITY, PLUS_INFINITY ), 
                 ( \(f) -> ( func(f,a) * EXP(SQRT_MINUS_1*2.0*PI*f*t) ) ) );

    F1_Hilbert :: Time -> Time -> a -> func -> a ;
             F1_Hilbert (tou, t, a, func)  
                      | tou /= t  = func(tou,a) / ( t - tou ) 
                      | otherwise = 0    ;
    ( HilbertTrans ( func ) ) (t,a) =
        (1/Pi) * defint ( ( MINUS_INFINITY, PLUS_INFINITY ), 
                          ( \(tou) -> F1_Hilbert (tou, t, a, func) ) ) ;

  } where Usig (func);

  class AnalogMod (func) {

    -- Modulation/Demodulation Functions:
    -- see Ref. 1, page 23-1 (Analog Communication)
    DSB_Modulation  :: func(Time,a) -> func(Time,a);
    DSB_DeModulate  :: func(Time,a) -> func(Time,a);
    SSB_Modulation  :: func(Time,a) -> func(Time,a);
    SSB_DeModulate  :: func(Time,a) -> func(Time,a);
    AM_Modulation   :: func(Time,a) -> func(Time,a);
    AM_DeModulate   :: func(Time,a) -> func(Time,a);
    PM_Modulation   :: func(Time,a) -> func(Time,a);
    PM_DeModulate   :: func(Time,a) -> func(Time,a);
    FM_Modulation   :: func(Time,a) -> func(Time,a);
    FM_DeModulate   :: func(Time,a) -> func(Time,a);
    PAM_Modulation  :: func(Time,a) -> func(Time,a);
    PAM_DeModulate  :: func(Time,a) -> func(Time,a);
    PTM_Modulation  :: func(Time,a) -> func(Time,a);
    PTM_DeModulate  :: func(Time,a) -> func(Time,a);
    PCM_Modulation  :: func(Time,a) -> func(Time,a);
    PCM_DeModulate  :: func(Time,a) -> func(Time,a);
    DM_Modulation   :: func(Time,a) -> func(Time,a);
    DM_DeModulate   :: func(Time,a) -> func(Time,a);

    -- DSB ( Double Sideband Modulation with continuous carrier ) : 
    -- see Ref. 1, page 23-4
    ( DSB_Modulation (func) ) (t,a) =
      Amplitude * func (t,a) * cos ( 2 * Pi * Freq_Carrier * t ) ;

    -- SSB ( Single Sideband Modulation with continuous carrier ) : 
    -- see Ref. 1, page 23-5
    ( SSB_Modulation (func) ) (t,a) =
      Amplitude * func (t,a) * cos ( 2 * Pi * Freq_Carrier * t ) -
      Amplitude * HilbertTrans(func(t,a)) * sin ( 2 * Pi * Freq_Carrier * t ) ;

    -- AM ( Conventional Amplitude Modulation with continuous carrier ) : 
    -- see Ref. 1, page 23-4
    ( AM_Modulation (func) ) (t,a) =
      Amplitude * ( 1 + Const * func (t,a) ) * 
                  cos ( 2 * Pi * Freq_Carrier * t ) ;

    -- PM ( Phase Modulation with continuous carrier ) : 
    -- see Ref. 1, page 23-7
    ( PM_Modulation (func) ) (t,a) =
      Amplitude * cos ( 2 * Pi * Freq_Carrier * t +
                        PeakPhaseDeviation * func (t,a) ) ;

    -- FM ( Frequency Modulation with continuous carrier ) : 
    -- see Ref. 1, page 23-7
    ( FM_Modulation (func) ) (t,a) =
      Amplitude * cos ( 2 * Pi * Freq_Carrier * t +
                        PeakFreqDeviation * indefint ( \(t) -> func (t,a) ) );

    -- Following functions are pulse modulations:
    Pulse :: Time -> Time -> Time -> a ;

    -- PAM ( Amplitude Modulation with pulse carrier ) : 
    -- see Ref. 1, page 23-11
    ( PAM_Modulation (func) ) (t,a) =
      Amplitude * ( 1 + Const * func (t,a) ) * 
                  Pulse ( Period_Pulse ,Duration_pulse, t ) ;

    -- PTM ( Pulse Time Modulation ( pulse carrier ) ) : 
    -- Two types: Pulse duration modulation and pulse position modulation
    --            with pulse amplitude fixed.
    -- see Ref. 1, page 23-12
    ( PTM_Modulation (func) ) (t,a) =
      Amplitude * 
       Pulse ( Period_pulse * func (t,a) , Duration_pulse * func (t,a) , t ) ;

    -- PCM ( Pulse Code Modulation ( pulse carrier ) ) :
    -- see Ref. 1, page 23-15
    -- Use group of pulses to code signal ( for example, a group with n
    -- pulses can represent 2^n discrete levels for the amplitude of 
    -- the signal. )
    ( PCM_Modulation (func) ) (t,a) = 
                     CodedPulseGroup ( RealtoInt ( func (t,a) ) ) ;
 
    -- DM ( Delta Modulation ( pulse carrier ) ) :
    -- see Ref. 1, page 23-17
    -- Only changes from sampling instant to sampling instant have been
    -- transmitted.
    ( DM_Modulation (func) ) (t,a) = 
                    Transmitted ( func (t,a) - func ( (t-delta(t)), a) ) ;

  } where Cont (func) ;
  
  class Disc (func) {

    -- Difine "summation", the summation of a sequence
    summation :: func(Int) -> Int -> Int -> a where Real(a) ;
    summation ( (i1,i1) , ( \(n) -> func(n) ) ) = func(i1) ;
    summation ( (i1,i+1) , ( \(n) -> func(n) ) ) =
            summation ( (i1,i) , ( \(n) -> func(n) ) ) + func(i+1) ;
 
    -- Functions to process data (interpolation & sorting):
    InterpLinear    :: func(n,a) -> func(n,a) -> func(b,a) 
                                            where {Int(n),Real(a),Real(b)};
    InterpPolynl    :: func(n,a) -> func(n,a) -> func(b,a) 
                                            where {Int(n),Real(a),Real(b)};
    InterpSpline    :: func(n,a) -> func(n,a) -> func(b,a) 
                                            where {Int(n),Real(a),Real(b)};
    SortShells      :: func(n,a) -> func(n,a) where {Int(n),Real(a)};
    SortHeapsort    :: func(n,a) -> func(n,a) where {Int(n),Real(a)};
    SortQuicksort   :: func(n,a) -> func(n,a) where {Int(n),Real(a)};
  
    -- see Ref. 3 page 86
    F1_Linear :: func(Int,a) -> func(Int,a) -> Int -> a -> a where Real(a);
    F1_Linear ( xFun, yFun, i, a, x ) 
        | inRange ( ( xFun(i,a), xFun(i+1,a) ), x ) = 
                  ( ( x - xFun(i,a) ) * yFun(i+1,a) + 
                    ( xFun(i+1,a) - x ) * yFun(i,a) )  
                  * recipl ( xFun(i+1,a) - xFun(i,a) )
        | otherwise   =  0 ;
    ( InterpLinear ( xFun , yFun ) ) (x,a) = 
        summation ( ( 1 , NUMBER_POINTS ) 
                  ( \(i) -> F1_Linear ( xFun, yFun, i, a, x ) ) ) ;

    -- see Ref. 1, page 46-40
    F1_Polynl :: func(Int,a) -> Int -> Int -> a -> a where Real(a);
    F1_Polynl ( xFun, i, k, a, x ) 
        | k == i   =  1
        | otherwise   =  ( x - xFun(k,a) ) * recipl ( xFun(i,a) - xFun(k,a) ) ;
    F2_Polynl :: func(Int,a) -> func(Int,a) -> Int -> a -> a where Real(a);
    F2_Polynl ( xFun, yFun, i, a, x ) = yFun(i,a) *
        product ( ( 1 , NUMBER_POINTS ) , 
                  ( \(k) -> F1_Polynl ( xFun, i, k, a, x) ) ) ;
    ( InterpPolynl (xfun, yFun) ) (x,a) =
        summation ( ( 1 , NUMBER_POINTS ), 
                  ( \(i) -> F2_POLYNL ( xFun, yFun, i, a, x ) ) ) ;

    -- see Ref. 3, page 86
    -- Natural Cubic Spline: y"(1) = y"(n) = 0
    A_Spline :: Int -> a -> a where Real(a) ; 
    B_Spline :: Int -> a -> a where Real(a) ; 
    C_Spline :: Int -> a -> a where Real(a) ; 
    D_Spline :: Int -> a -> a where Real(a) ; 
    yDDF :: Int -> a where Real(a) ; 
    A_Spline(i, x) = ( xFun(i+1,a) - x ) * recipl ( xFun(i+1,a) - xFun(i,a) ) ;
    B_Spline(i, x) = ( x  -  xFun(i,a) ) * recipl ( xFun(i+1,a) - xFun(i,a) ) ;
    C_Spline(i, x) = ( 1/6 ) * ( A_Spline(i, x) ^ 3 - A_Spline(i, x) )
                             * ( xFun(i+1,a) - xFun(i,a) ) ^ 2 ;
    D_Spline(i, x) = ( 1/6 ) * ( B_Spline(i, x) ^ 3 - B_Spline(i, x) )
                             * ( xFun(i+1,a) - xFun(i,a) ) ^ 2 ;
    -- yDDF(i) : Second derivitive function of Spline curve at ith point
    -- The following is the set of equations for yDDF (i) :
       yDDF_equation :: Int -> Equation ;
       yDDF_equation (1) = yDDF (1) == 0 ;
       yDDF_equation (NUMBER_POINTS) = yDDF (NUMBER_POINTS) == 0 ;
       yDDF_equation (i) = [ i:=
         ( 1/6 ) * ( xFun(i,a) - xFun(i-1,a) ) * yDDF (i-1) +
         ( 1/3 ) * ( xFun(i+1,a) - xFun(i-1,a) ) * yDDF (i) +
         ( 1/6 ) * ( xFun(i+1,a) - xFun(i,a) ) * yDDF (i+1) == 
                 ( yFun(i+1,a) - yFun(i,a) ) * recipl ( xFun(i+1,a) - xFun(i,a) ) -
                 ( yFun(i,a) - yFun(i-1,a) ) * recipl ( xFun(i,a) - xFun(i-1,a) )  
                 | i <- range ( [ 2, 3 ... NUMBER_POINTS ] ) ] ; 
       [ yDDF (i) ] = solution ( [ yDDF(i) ] , 
                                 NUMBER_POINTS , 
                                 [ yDDF_equation (i) ] ) ;
    F1_Spline :: func(Int,a) -> func(Int,a) -> Int -> a -> a where Real(a);
    F1_Spline ( xFun, yFun, i, a, x ) 
        | inRange ( ( xFun(i,a), xFun(i+1,a) ), x ) = 
                  A_Spline (i, x) * yFun(i,a) + B_Spline (i, x) * yFun(i+1,a) +
                  C_Spline (i, x) * yDDF(i,a) + D_Spline (i, x) * yDDF(i+1,a) 
        | otherwise   =  0 ;
    ( InterpSpline ( xFun , yFun ) ) (x,a) = 
        summation ( ( 1 , NUMBER_POINTS ) 
                  ( \(i) -> F1_Spline ( xFun, yFun, i, a, x ) ) ) ;

    -- Domain Transformations for discrete signal:
    z_Transform      :: func(TimetoInt(Time),a) -> 
                        func(z,a) where {Real(a),Complex(z)};
    Inv_z_Transform  :: func(z,a) -> 
                        func(TimetoInt(Time),a) where {Real(a),Complex(z)};
    FourierDisc      :: func(TimetoInt(Time),a) -> 
                        func(FrequencytoInt(Frequency),a) where Real(a);
    InvFourierDisc   :: func(FrequencytoInt(Frequency),a) ->
                        func(TimetoInt(Time),a) where Real(a);

    -- see Ref. 1, page 15-20
    ( z_Transform ( func ) ) (z,a) =
      summation ( ( ZERO, PLUS_INFINITY ), 
                  ( \(k) -> ( func (k*T,a) * z ^ ( - k ) ) ) );

    ( Inv_z_Transform ( func ) ) (k*T,a) =
      defint ( ( Singularities_Circle ) , 
               ( \(z) -> ( func (z,a) * z ^ ( k - 1 ) ) ) );

    -- Alternative definition of Inv_z_Transform
    ( Inv_z_Transform ( func ) ) (k*T,a) =
      summation ( ( 1, NUMBER_RESIDUES ) , 
            ( \(i) -> ( RESIDUE_ith_POLE( func (z,a) * z ^ ( k - 1 ) ) ) ) ) ;

    -- see Ref. 1, page 28-4
    ( FourierDisc ( func ) ) (omega,a) =
      summation ( ( MINUS_INFINITY_INT, PLUS_INFINITY_INT ) , 
            ( \(i) -> ( func(i,a) * EXP(-SQRT_MINUS_1 * i * omega ) ) ) ) ;

    -- see Ref. 1, page 28-5
    ( InvFourierDisc ( func ) ) (i,a) =
      ( 1 / (2 * PI) ) * defint ( ( - PI, PI ) , 
            ( \(omega) -> ( func(omega,a) * EXP(-SQRT_MINUS_1 * i * omega ) ) ) ) ;

  } where { RealFunc (func), Usig (func) };

  class DigitalMod (func) {

    -- Modulation/Demodulation Functions:
    -- see Ref. 1, page 24-1 (Digital Communication)
    BPSK_Modulation  :: func(Time) -> Int -> Bool -> func(Time);
    BPSK_DeModulate  :: func(Time) -> a -> func(Time);
    n_PSK_Modulation :: func(Time) -> Int -> a -> func(Time);
    n_PSK_DeModulate :: func(Time) -> a -> func(Time);
    QAM_256_Modulate :: func(Time) -> a -> func(Time);
    QAM_256_DeModula :: func(Time) -> a -> func(Time);
    n_FSK_Modulation :: func(Time) -> a -> func(Time);
    n_FSK_DeModulate :: func(Time) -> a -> func(Time);
    n_QAM_Modulation :: func(Time) -> a -> func(Time);
    n_QAM_DeModulate :: func(Time) -> a -> func(Time);

    -- BPSK ( Binary Phase-Shift Keying ) : 
    -- see Ref. 1, page 24-5
    BPSKfunc :: Time -> Int -> Bool ;  
         -- Original binary codes signal function
    BPSKData :: Bool -> Int ;
    BPSKData (b) | b == FALSE  = 0
                 | b == TRUE   = 2 ; 
    func = BPSKfunc ;
    ( BPSK_Modulation (func) ) (t,a) =
      Amplitude * cos ( 2 * Pi * Freq_Carrier * t + 
                        BPSKData ( func ( round(t/Period) ) * Pi/2 + 
                        InitialPhase ) ) ;

    -- n_PSK ( n_bits Phase-Shift Keying ) : 
    -- see Ref. 1, page 24-6 (generalized from QPSK)
    nPSKfunc :: Time -> Int -> n_bit ;  
         -- Original n_digits coded signal function
    nPSKData :: n_bit -> Int ;
    nPSKData (b) = 2 * b ; 
    func = nPSKfunc ;
    ( n_PSK_Modulation (func) ) (t,a) =
      Amplitude * cos ( 2 * Pi * Freq_Carrier * t + 
                        nPSKData ( func ( round(t/Period) ) * Pi/n + 
                        InitialPhase ) ) ;

    -- n_FSK ( n_bits Frequency-Shift Keying ) : 
    -- see Ref. 1, page 24-6 (generalized from QPSK)
    nFSKfunc :: Time -> Int -> n_bit ; 
         -- Original n_digits coded signal function
    nFSKFreq :: n_bit -> Frequency ;
    nFSKPhase :: n_bit -> angle ;
    func = nFSKfunc ;
    ( n_FSK_Modulation (func) ) (t,a) =
      Amplitude * cos ( 2 * Pi * ( nFSKFreq ( func ( round(t/Period) ) )
                                   - Freq_Carrier ) * t +
                        nFSKPhase ( func ( round(t/Period) ) ) ) ;

  } where Disc (func);

  class DiscPer (func) {
    DFT    :: func(Time, a) -> func(Frequency, a) where Real(a);
    InvDFT    :: func(Frequency, a) -> func(Time, a) where Real(a);
  } where { Disc(func), Per(func) };
 
  class ContPer (func) {
    FourierExpansion :: func(Time,a) -> func(Time,a);
  } where { Cont(func), Per(func) };

end MATH_MODELS_1 ;

-- II. Special functions for filter applications:

model MATH_MODELS_2

  includes recips ;

  class RealFuncs (a){

    -- Mathematical Special Functions: 
    -- see Ref. 4

    Chebyshev      :: a -> Int -> a;
    Chebyshev (order,a) = cos(order*acos(a)) ; 
    -- Chebyshev (0, a) = 1.0;
    -- Chebyshev (1, a) = a;
    -- Chebyshev (order+1, a) 
    --                  = 2*a*Chebyshev (order, a) - Chebyshev (order-1, a);

    -- Jacobi Elliptic Function ( Elliptic (order, a) ) 
    -- is the solution of following differential equation:
    -- see Ref. 2, page 569
    Elliptic      :: a -> Int -> a;
    Elliptic (order, a) = solution ( func(order, a), 1,
        Deriv ( \(a) -> func (order, a) ) 
                     == ( (1 - (func (order, a)) ^ 2 ) *
                        ( 1 - (order * func (order, a)) ^ 2 ) ) ^ (0.5) ); 

    -- Hillbert Filter: no reference!
    Hillbert :: a -> a;

    -- Bessel Function ( First Kind: Bessel (order, a) ) 
    -- is the solution of following differential equation:
    -- see Ref. 2, page 358
    Bessel :: a -> Int -> a;
    Bessel (order, a) = solution ( func(order, a), 1,
            Deriv ( \(a) -> Deriv ( \(a) -> func (order, a) ) )   
          + Deriv ( \(a) -> func (order, a) ) / a
          + (1 - (order / a) ^ 2 ) * func (order, a) == 0 ) ;

  } where { Real (a), RealFunc(func) } ;

  class FilterFunc (f) {

    Ideal_0 :: Frequency -> Frequency -> a;
    Ideal_0 (f,fcutoff)  
       | inRange ( ( 0, fcutoff ), f ) = 0
       | otherwise = 1 ; 
    Ideal :: Frequency -> a;
    Ideal (f) = Ideal (f,fcutoff);  
    Butterworth_O    :: Real -> Frequency -> Frequency -> Int -> a;
    Butterworth_O (tolerance,f,fcutoff,order)
                  = (1 + tolerance * (f /fcutoff) ^ (2 * order)) ^ (-0.5);
    Butterworth      :: Frequency -> a;
    Butterworth  (f) = Butterworth_O ( tolerance,f,fcutoff,order );

    ChebyFilter_O :: a -> Int -> a;
    ChebyFilter_O (epsilon, f, fcutoff, order)
      = (1 + (epsilon * Chebyshev (order,f /fcutoff)) ^ 2 ) ^ (-0.5);
    ChebyFilter      :: Frequency -> a;
    ChebyFilter  (f) = ChebyFilter_O ( epsilon,f,fcutoff,order );

    EllipticFilter_O :: a -> Int -> a;
    EllipticFilter_O (epsilon, f, fcutoff, order) 
             = (1 + (epsilon * Elliptic (order, f/fcutoff) ) ^ 2 ) ^ (-0.5);
    EllipticFilter   :: Frequency -> a;
    EllipticFilter(f) = EllipticFilter_O ( epsilon,f,fcutoff,order );

    BesselFilter_O :: a -> Int -> a;
    BesselFilter_O (epsilon, f, fcutoff, order) 
                = (1 + (epsilon * Bessel (order, f/fcutoff) ) ^ 2 ) ^ (-0.5);
    BesselFilter   :: Frequency -> a;
    BesselFilter(f) = BesselFilter_O ( epsilon,f,fcutoff, order );

  } where { Real(a), Frequency (f) }; 

  class FilterConvFunc (func) {
    LowPass_to_HighPass :: func(Frequency) -> func(Frequency);  
    LowPass_to_HighPass ( func(f) ) = func( 1/f );  
    LowPass_to_BandPass :: func(Frequency) -> func(Frequency);  
    LowPass_to_BandPass ( func(f) ) = func( a * ( f/fref - fref/f ) );  
    LowPass_to_BandStop :: func(Frequency) -> func(Frequency);  
    LowPass_to_BandStop 
                ( func(f) ) = func( recipl ( a * ( f/fref - fref/f ) ) );
  } where FilterFunc (func);
 
end MATH_MODELS_2 ;
 
-- III. Conversion functions for matrix representation

model MATH_MODELS_3

  includes recips ;
  -- 'Matrix' has been defined in LRM page 160
  type CMatrix(c) = Matrix(c) where Complex(c) ; 
  type CVector(c) = Array(Int,c) where Complex(c) ; 
  class MatrixReps (CMatrix) {
  -- for n port:
    StoY    :: Int -> CMatrix -> CVector -> CMatrix ;
    YtoS    :: Int -> CMatrix -> CVector -> CMatrix ;
    StoZ    :: Int -> CMatrix -> CVector -> CMatrix ;
    ZtoS    :: Int -> CMatrix -> CVector -> CMatrix ;
    YtoZ    :: Int -> CMatrix -> CMatrix ;
    ZtoY    :: Int -> CMatrix -> CMatrix ;
  -- for 2 port:
    ABCDtoY :: CMatrix -> CMatrix ;
    YtoABCD :: CMatrix -> CMatrix ;
    ABCDtoZ :: CMatrix -> CMatrix ;
    ZtoABCD :: CMatrix -> CMatrix ;
    ABCDtoS :: CMatrix -> CVector -> CMatrix ;
    StoABCD :: CMatrix -> CVector -> CMatrix ;
    StoT    :: CMatrix -> CMatrix ;
    TtoS    :: CMatrix -> CMatrix ;

  -- Definitions for linear algebra
    UnitMatrix :: Int -> CMatrix ;
    CC0, CC1 :: Complex ;
    CC0 = Rectang (0.0, 0.0) ;
    CC1 = Rectang (1.0, 0.0) ;
    delta :: Int -> Int -> Complex ;
    delta (i,j) = if i==j then CC1 else CC0 ;
    UnitMatrix (nport) = makearray ( nport, [ i := makearray ( nport,
                           [ j := delta (i,j) | j <- Natural(nport) ] ) |
                           i <- Natural(nport) ] ) ; 
    Inverse :: CMatrix -> CMatrix ;
    Inverse (nport, C) * C = UnitMatrix (nport) ;
    C * Inverse (nport, C) = UnitMatrix (nport) ;
    VectorToMatrix :: CVextor -> CMatrix ;
    VectorToMatrix (V) = makearray ( bounds (V), [ i := makearray ( bounds (V),
                           [ j := delta (i,j) * V(j) | j <- indices (V) ] ) |
                           i <- indices (V) ] ) ; 
    SquareRootRealPart :: CVector -> CVector ;
    SquareRootRealPart (V) = makearray ( bounds (V), 
                               [ i := CC1 * sqrt ( realPart (V(i)) ) |
                               i <- indices (V) ] ) ;
    Conjg :: CVector -> CVector ;
    Conjg (V) = makearray ( bounds (V),
                            [ i := conjugate (V(i)) | i <- indices (V) ] ) ;

    ConjgTermM = VectorToMatrix ( Conjg ( TermVec ) ) ;
    TermM = VectorToMatrix ( TermVec ) ;
    SqrtRM = VectorToMatrix ( SquareRootRealPart ( TermVec ) ) ;
    NormC :: Int -> CMatrix -> CMatrix;
    NormC (nport, C) = SqrtRM * C * Inverse ( nport, SqrtRM ) ;

    StoY (nport, S, TermVec) = 
         SqrtRM * Inverse ( nport, ( ConjgTermM + S * TermM ) ) * 
                    ( UnitMatrix (nport) - S ) * Inverse ( nport, SqrtRM );

    YtoS (nport, Y, TermVec) = 
         Inverse ( nport, ( UnitMatrix (nport) + NormC(nport, Y) * TermM ) ) *
         ( UnitMatrix (nport) - NormC(nport, Y) * ConjgTermM ) ;

    StoZ (nport, S, TermVec) = 
         SqrtRM * Inverse ( nport, ( UnitMatrix (nport) - S ) ) * 
                    ( ConjgTermM + S * TermM ) * Inverse ( nport, SqrtRM );

    ZtoS (nport, Z, TermVec) = 
         Inverse ( nport, ( TermM + NormC(nport, Z) ) ) *
         ( NormC(nport, Z) - ConjgTermM ) ;

    YtoZ (nport, Y) = Inverse ( nport, Y ) ;

    ZtoY (nport, Z) = Inverse ( nport, Z ) ;
    
    ABCDtoY ( ABCD ) = makearray ( 2 , [ i := makearray ( 2 , 
                                       [ j := Yij | j <- [1,2] ] ) |
                                         i <- [1,2] ] )  where { Yij 
         | ( (i==1) && (j==1) ) = ABCD(2,2) * rec
         | ( (i==1) && (j==2) ) = ABCD(2,1) - ABCD(1,1)*ABCD(2,2) * rec
         | ( (i==2) && (j==1) ) = - rec 
         | ( (i==2) && (j==2) ) = ABCD(1,1) * rec 
                                 where { rec = recipl ( ABCD(1,2) ) ; } ; } ;

    YtoABCD ( Y )    = makearray ( 2 , [ i := makearray ( 2 , 
                                       [ j := Aij | j <- [1,2] ] ) |
                                         i <- [1,2] ] )  where { Aij 
         | ( (i==1) && (j==1) ) = - Y(2,2) * rec
         | ( (i==1) && (j==2) ) = - rec
         | ( (i==2) && (j==1) ) = Y(1,2) - Y(1.1) * Y(2,2) * rec 
         | ( (i==2) && (j==2) ) = - Y(1,1) * rec 
                                 where { rec = recipl ( Y(2,1) ) ; } ; } ;

    ABCDtoZ ( ABCD ) = makearray ( 2 , [ i := makearray ( 2 , 
                                       [ j := Zij | j <- [1,2] ] ) |
                                         i <- [1,2] ] )  where { Zij 
         | ( (i==1) && (j==1) ) = ABCD(1,1) * rec
         | ( (i==1) && (j==2) ) = ABCD(1,2) - ABCD(1,1)*ABCD(2,2) * rec
         | ( (i==2) && (j==1) ) = rec
         | ( (i==2) && (j==2) ) = - ABCD(2,2) * rec
                                 where { rec = recipl ( ABCD(2,1) ) ; } ; } ;

    ZtoABCD ( Z )    = makearray ( 2 , [ i := makearray ( 2 , 
                                       [ j := Aij | j <- [1,2] ] ) |
                                         i <- [1,2] ] )  where { Aij 
         | ( (i==1) && (j==1) ) = Z(1,1) * rec
         | ( (i==1) && (j==2) ) = Z(1,2) - Z(1.1) * Z(2,2) * rec
         | ( (i==2) && (j==1) ) = rec
         | ( (i==2) && (j==2) ) = - Z(2,2) * rec
                                 where { rec = recipl ( Z(2,1) ) ; } ; } ;

    ABCDtoS ( ABCD, TermVec ) = makearray ( 2 , [ i := makearray ( 2 , 
                                       [ j := Sij | j <- [1,2] ] ) |
                                         i <- [1,2] ] )  where { Sij 
         | ( (i==1) && (j==1) ) = ( aa + ABCD(1,2) - cc - dd ) * rec
         | ( (i==1) && (j==2) ) = 2 * sqrt (zz) * rec *
                             ( ABCD(1,1) * ABCD(2,2) - ABCD(1,2) * ABCD(2,1) )
         | ( (i==2) && (j==1) ) = 2 * sqrt (zz) * rec
         | ( (i==2) && (j==2) ) = ( - aa + ABCD(1,2) - cc + dd ) * rec
                                 where { zz = TermVec (1) * TermVec (2);
                                         aa = ABCD(1,1) * TermVec (2);
                                         cc = ABCD(2,1) * zz;
                                         dd = ABCD(2,2) * TermVec (1);
                                         rec = recipl ( aa + ABCD(1,2) 
                                                        + cc + dd ) ; } ; } ;

    StoABCD ( S, TermVec )    = makearray ( 2 , [ i := makearray ( 2 , 
                                       [ j := Aij | j <- [1,2] ] ) |
                                         i <- [1,2] ] )  where { Aij 
         | ( (i==1) && (j==1) ) = (R1*(CC1-S(1,1))-Z01*cc)*rec
         | ( (i==1) && (j==2) ) = -rec*((R1*(CC1-S(1,1))-Z01*cc)*Z02-
                                         2*RR+Z01*(R2*(CC1-S(2,2))))
         | ( (i==2) && (j==1) ) = cc * rec
         | ( (i==2) && (j==2) ) = -rec*(Z02*cc-R2*(CC1-S(2,2)))
                    where { Z01 = TermVec(1); R1=realPart( Z01 );
                            Z02 = TermVec(2); R2=realPart( Z02 ); 
                            cc=0.5*((CC1-S(1,1))*(CC1-S(2,2))-S(1,2)*S(2,1));
                            rec = recipl (S(2,1)*sqrt(abs(R1*R2))) ; } ; } ;

    -- StoT    ( S )    =  ;
    -- TtoS    ( T )    =  ;

  } where { CMatrix (C), CMatrix (S), CMatrix (Y), CMatrix (Z) , 
            CMatrix (ABCD), CVector (TermVec) , CVecter (V), Int (nport) } ;

end MATH_MODELS_3 ;

-- References:

  -- Ref. 1 :  "Reference Data for Engineers: Radio, Electronics, Computer, 
  --            and Communications" seventh edition by Edward C. Jordan,
  --            Howard W. Sams & Co. 1986.

  -- Ref. 2 :  "Handbook of Mathematic Functions" by Abramowitz, ..
  --            1972.

  -- Ref. 3 :  "Numerical Recipes", 1986.

  -- Ref. 4 :  "Digital Signal Processing" by Alan V. Oppenheim.

